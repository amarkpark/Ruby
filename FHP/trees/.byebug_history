exit
result
c
result
exit
result
c
result
c
result
child
c
result
exit
result.is_a?(Tree)
result.is_a(Tree)
result
exit
result.is_a(Tree)
result.payload
result
c
result
exit
result.is_a?(Array)
result
c
result
exit
result[0].children.any?
result.length
result.payload
result.children.any?
depth_first_r3(result, matcher)
result
c
result
exit
depth_first_r3(result, matcher)
result
c
result
exit
child
node
c
child
node
c
child
node
c
child
node
c
child
node
exit
child
c
child
c
node
child
c
child
c
child
c
child
c
child
c
child
exit
child
c
child
c
child
c
child
exit
node
exit
node
exit
node
c
node
c
node
exit
node
exit
node
c
node
exit
node
c
node
c
node
c
node
c
node
c
node
exit
node
exit
node
exit
node
exit
node
exit
node
exit
node
c
node
exit
node
c
node
exit
node
exit
node
exit
node
exit
node
c
exit
node
c
node
c
node
exit
c
node
c
node
c
node
exit
c
node
exit
node
c
exit
c
node
exit
node
exit
node
c
node
exit
node
c
visited[visited.index(node) - 1]
node
exit
c
@current.payload == matcher
@current.payload
@current
@currnt.payload == matcher
node.payload == matcher
node.payload
node
c
@current
node
c
child
@current
node
c
@current
node
c
@current.payload
node.payload
c
@current
node
exit
c
node
@current
current
c
node
c
node.payload == matcher
node
c
node
stack.length
c
found.length
stack
node
c
stack.include?(node)
node
c
node
c
node
found.include?(node)
c
found.include?(node)
node
c
found.include?(node)
c
node
c
child
node
c
child
node
c
node
c
stack.length
node
c
stack.length
child
exit
node
c
child
c
stack[-1]
stack.length
stack
node
c
stack.length
stack
found.length
found
child
