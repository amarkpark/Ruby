c
@current.payload == matcher
@current.payload
@current
@currnt.payload == matcher
node.payload == matcher
node.payload
node
c
@current
node
c
child
@current
node
c
@current
node
c
@current.payload
node.payload
c
@current
node
exit
c
node
@current
current
c
node
c
node.payload == matcher
node
c
node
stack.length
c
found.length
stack
node
c
stack.include?(node)
node
c
node
c
node
found.include?(node)
c
found.include?(node)
node
c
found.include?(node)
c
node
c
child
node
c
child
node
c
node
c
stack.length
node
c
stack.length
child
exit
node
c
child
c
stack[-1]
stack.length
stack
node
c
stack.length
stack
found.length
found
child
c
found.include?(node)
node
c
node.payload == matcher
node.payload
node
c
found.length
found
node
c
found.length
found
stack
node
c
node
exit
node
c
node
c
node
c
node
c
node
exit
node
c
stack
found
node
c
node
c
node
exit
stack
node
stack.pop
stack
node
c
node
c
node
exit
stack
node
c
node
n
node
exit
node.children.any?
node.children == nil
node.children
node
n
node
n
node
exit
node.payload
exit
node.payload == matcher
matcher.is_a(String)
node.payload.is_a(String)
node.payload
node.@payload
node
exit
found.length
found
 n
child
n
exit
stack
found.length
found
