exit
counts.inspect
counts
exit
counts
exit
counts
row
exit
row
i
exit
i
row
ro
exit
counts
@arraytable.length
@arraytable.by_row.each.inspect()
@arraytable.by_row.each.inspect
@arraytable.by_row.each {|e| e.inspect}
@arraytable.by_row.each(&:inspect)
@arraytable.by_row.each(&inspect)
counts
exit
allcats.flatten.count(categories[1])
allcats.count(categories[1])
allcats.count(catagories[1])
allcats.flatten.count(catagories[1])
categories[1]
catagories[1]
allcats.flatten
categories
allcats.flatten.count(catagories[1])
allcats.count(catagories[1])
allcats.count(catary[1])
allcats.count(catary[0])
catary[0]
catary(0)
catary
catary = @arraytable.by_col.values_at(2).uniq
catary
allcats = @arraytable.by_col.values_at(2)
@arraytable.by_col.values_at(2)
@arraytable.by_row.values_at(2)
@arraytable.by_row.value_at(2)
@arraytable.to_a
catary
catary[0][1] = Row0.to_hash
catary = @arraytable.by_col.values_at(2).uniq
catary
catary[0,1] = Row0.to_hash
catary
catary[0] << Row0
catary[0]
catary = @arraytable.by_col.values_at(2).uniq
Row0.field(2)
Row0 = @arraytable[0]
first
categories
first[:violation_category]
first = @arraytable[0].to_hash
exit
@hashtable[0]
@arraytable[0]
@arraytable.inspect()
@arraytable.inspect
@arraytable
Biohazards
biohazards
categories
exit
@arraytable[0].class
@arraytable[0]
@arraytable[1]
@hashtable.headers()
@hashtable.[](1)
@hashtable.table
@hashtable.mode
@hashtable.to_a[1]
@hashtable.to_a[0]
@hashtable.inspect
@hashtable.values_at(@hashtable.headers[2]).uniq
headers
@hashtable.values_at(@hashtable.headers()(2)).unique
@hashtable.values_at(@hashtable.headers(2)).unique
@hashtable.values_at(self.headers(2))
@hashtable.values_at(:violation_category).uniq.flatten
@hashtable.values_at(:violation_category)
@hashtable.class
@hashtable.inspect
@hashtable.is_a?(Object)
@hashtable.is_a?(Class)
@hashtable.ancestors
@hashtable.is_a?(Array)
@hashtable.is_a?(String)
@hashtable.is_a?(Hash)
@hashtable.is_a(Hash)
@hashtable.to_a.inspect
@hashtable.each(&inspect())
@hashtable.each(|r| r.inspect())
@hashtable.by_row().each.inspect()
@hashtable.by_row.each.inspect()
@hashtable.headers()
@hashtable.by_row.inspect()
@hashtable.inspect()
@hashtable.each.inspect
@hashtable.all
@hashtable.inspect
@hashtable
@hashtable.value_at(0)
@hashtable(0)
@hashtable[](0)
exit
@arraytable.headers()
@arraytable.row(0)
@arraytable.values_at(0)
@arraytable(1)
categories
exit
categories = @arraytable.by_col.values_at(2).flatten.uniq
categories = @arraytable.by_col.values_at(2).flatten
categories = @arraytable.by_col.values_at(2)
categories = @arraytable.by_col.values_at(2).to_a.flatten
categories = @arraytable.by_col.values_at(2).to_a
@arraytable.values_at[violation_category]
categories = @arraytable.by_col.values_at[violation_category].to_a
@arraytable.to_col.values_at[violation_category]
@arraytable.values_at[violation_category]
@arraytable.[](2)
@arraytable.values_at[](2)
@arraytable.is_a(Array)
@arraytable.length
testary = @arraytable.to_a
@arraytable.values_at(0)
@arraytable.by_col.values_at(2)
@arraytable.by_col>values_at(2)
@arraytable.values_at[violation_category]
@arraytable.values_at(violation_category)
@arraytable.values_at(violation_category:)
@arraytable.values_at(1)
@arraytable.values_at(3)
@arraytable.to_a
@arraytable.inspect
@arraytable
exit
@hashtable
exit
@hashtable
exit
row.is_a(Hash)
row(violation_category)
row[violation_category]
row
row.inspect
exit
row.inspect
q
